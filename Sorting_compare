import pandas as pd
import time

# Load dataset from Excel file
def get_dataset(sheet_name):
    df = pd.read_excel(
        r"/Users/nateweaver/Desktop/IT481_M4_Dataset.xlsx",
        sheet_name=sheet_name
    )
    numbers = pd.to_numeric(df.iloc[:, 0], errors='coerce').dropna().tolist()
    return numbers

# Bubble Sort implementation
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

# Quick Sort implementation
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [x for x in arr[1:] if x <= pivot]
    more = [x for x in arr[1:] if x > pivot]
    return quick_sort(less) + [pivot] + quick_sort(more)

# Merge Sort implementation
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

# Merge helper function
def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

# Dictionary to store sort results
results = {
    "Algorithm": [],
    "Dataset Size": [],
    "Execution Time (s)": []
}

# Measure and store sort execution time
def sort_time(sort_function, data, label):
    start = time.time()
    sort_function(data.copy())
    end = time.time()
    elapsed = round(end - start, 4)
    print(f"{label} dataset time: {elapsed:.4f} seconds")

    # Save to results table
    results["Algorithm"].append(sort_function.__name__)
    results["Dataset Size"].append(label)
    results["Execution Time (s)"].append(elapsed)

# Load datasets
small_data = get_dataset("Small")
medium_data = get_dataset("Medium")
large_data = get_dataset("Large")

# Display counts - Commented to reduce length of output
#print(f"Small: {len(small_data)} values")
#print(f"Medium: {len(medium_data)} values")
#print(f"Large: {len(large_data)} values")

# Run all sorts on all datasets
for sort_func in [bubble_sort, quick_sort, merge_sort]:
    for label, data in [("Small", small_data), ("Medium", medium_data), ("Large", large_data)]:
        sort_time(sort_func, data, label)

# Display results table
results_df = pd.DataFrame(results)
pivot_df = results_df.pivot(index="Algorithm", columns="Dataset Size", values="Execution Time (s)")
print("\n=== Sort Algorithm Performance Table ===")
print(pivot_df.to_string())
